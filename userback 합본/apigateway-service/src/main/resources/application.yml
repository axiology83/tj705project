server:
  port: 8000
  
spring:
  application:
    name: apigateway-service
    
  cloud:
    gateway:
      globalcors:
        add-to-simple-url-handler-mapping: true
        cors-configurations:
          '[/**]':
            allowedOrigins: "http://localhost:3000"
            allowedHeaders: '*'
            allow-credentials: true
            allowedMethods: POST, GET, PUT, DELETE
            
      routes:
      
        # 유저 엑츄에이터
      - id: user-service
        uri: lb://USER-SERVICE
        predicates:
        - Path=/user-service/actuator/**
        - Method=GET, POST
        filters:
        - RemoveRequestHeader=Cookie
        - RewritePath=/user-service/(?<segment>.*), /$\{segment}
      
      
        #홍구님 보드 서비스
      - id: board-service
        uri: lb://BOARD-SERVICE
        predicates:
        - Path=/board-service/** 
        - Method=GET, POST, PUT, DELETE
        
        #홍구님 카테고리서비스
      - id: category-service #순서 2번
        uri: lb://CATEGORY-SERVICE #순서 3번
        predicates:
        - Path=/category-service/** #순서 1번   
        - Method=GET, POST, PUT, DELETE
        
        # 정호님 리뷰서비스
      - id: review-service 
        uri: lb://REVIEW-SERVICE 
        predicates:
        - Path=/review-service/**   
        - Method=GET, POST, PUT, DELETE
        
        # 은솔님 별점서비스
      - id: updatereviewrate-service 
        uri: lb://UPDATEREVIEWRATE-SERVICE 
        predicates:
        - Path=/updatereviewrate-service/**   
        - Method=GET, POST, PUT, DELETE
        
        #종봉님 챗서비스
      - id: chat-service #순서 2번
        uri: lb://CHAT-SERVICE #순서 3번
        predicates:
        - Path=/chat-service/** #순서 1번   
        - Method=GET, POST, PUT, DELETE
        
        #종봉님 이미지파일 서비스
      - id: imgfile-service 
        uri: lb://IMGFILE-SERVICE 
        predicates:
        - Path=/imgfile-service/**   
        - Method=GET, POST, PUT, DELETE
        
        # 회원가입
      - id: user-service 
        uri: lb://USER-SERVICE 
        predicates:
        - Path=/user-service/users
        - Method=POST
        
        # 로그인
      - id: user-service 
        uri: lb://USER-SERVICE 
        predicates:
        - Path=/user-service/login 
        - Method=POST
        
        # 테스트용 회원 생성
      - id: user-service 
        uri: lb://USER-SERVICE 
        predicates:
        - Path=/user-service/testinsert
        - Method=POST
      
        # 헬스체크
      - id: user-service 
        uri: lb://USER-SERVICE 
        predicates:
        - Path=/user-service/health_check
        - Method=GET
        
        # user-service 
      - id: user-service 
        uri: lb://USER-SERVICE 
        predicates:
        - Path=/user-service/**   
        - Method=GET, POST, PUT, DELETE
        filters:
        - name: AuthorizationFilter
     
      
        
        #유정님 큐앤에이서비스     
      - id: qna-service 
        uri: lb://QNA-SERVICE 
        predicates:
        - Path=/QNA-service/**   
        - Method=GET, POST, PUT, DELETE
        
        #윤주님 레코드서비스
      - id: record-service 
        uri: lb://RECORD-SERVICE 
        predicates:
        - Path=/record-service/**   
        - Method=GET, POST, PUT, DELETE
      
      
eureka:
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true 
    fetch-registry: true 
    service-url:
      defaultZone: http://localhost:8761/eureka
      
management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans

data:
  SECRET_KEY: tj705team
